/*
 * Copyright 2016 The Cartographer Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package point_viewer.proto;

message Vector2d {
  double x = 1;
  double y = 2;
}

message Vector3f {
  float x = 1;
  float y = 2;
  float z = 3;
}

message Vector3d {
  double x = 1;
  double y = 2;
  double z = 3;
}

message Quaterniond {
  double x = 1;
  double y = 2;
  double z = 3;
  double w = 4;
}

// Based on OpenGL standards, the value of fields will be between 0 and 1
message Color {
  float red = 1;
  float green = 2;
  float blue = 3;
  float alpha = 4;
}

message AxisAlignedCube {
  Vector3f min = 1;
  float edge_length = 2;
}

message AxisAlignedCuboid {
  Vector3d min = 3;
  Vector3d max = 4;

  // These were used in VERSION <= 10. Once we no longer need to keep these
  // working, we should remove these entries.
  Vector3f deprecated_min = 1;
  Vector3f deprecated_max = 2;
}

message NodeId {
  uint64 high = 3;
  uint64 low = 4;

  // These were used in VERSION <= 9. Once we no longer need to keep these
  // working, we should remove these entries.
  int32 deprecated_level = 1;
  int64 deprecated_index = 2;
}

enum PositionEncoding {
    INVALID = 0;
    Uint8 = 1;
    Uint16 = 2;
    Float32 = 3;
    Float64 = 4;
}

message OctreeNode {
  PositionEncoding position_encoding = 2;
  int64 num_points = 3;
  NodeId id = 4;
}

enum AttributeDataType {
   // very long types planned but not implemented yet
    INVALID_DATA_TYPE = 0;
    U8 = 1; // (X)
    U16 = 2;
    U32 = 3;
    U64 = 4;
    // U128 = 5;
    I8 = 6; // (5 + X)
    I16 = 7;
    I32 = 8;
    I64 = 9;
    // I128 = 10;
    F32 = 11;// (2*4) + X
    F64 = 12; 
    //max value 
    U8Vec3 = 27; //(13*2 + X)
    F64Vec3 = 38;
}

message Attribute {
  string name = 1;
  AttributeDataType data_type = 2;
}

message S2Cell {
  uint64 id = 1;
  uint64 num_points = 2;
}

message OctreeMeta {
  double resolution = 2;
  repeated OctreeNode nodes = 3;
  // This was used in VERSION == 12. Once we no longer need to keep it
  // working, we should remove this entry.
  AxisAlignedCuboid deprecated_bounding_box = 1;
}

message S2Meta {
  repeated S2Cell cells = 1;
  repeated Attribute attributes = 2;
}


message Meta {
  int32 version = 1;
  // This was used in VERSION <= 11 and again in VERSION >= 13.
  AxisAlignedCuboid bounding_box = 4;
  // Either nodes or cells is allowed, both is invalid
  oneof data {
    OctreeMeta octree = 6;
    S2Meta s2 = 7;
  } 
  // These were used in VERSION <= 11. Once we no longer need to keep these
  // working, we should remove these entries.
  double deprecated_resolution = 3;
  repeated OctreeNode deprecated_nodes = 5;
}
