/*
 * Copyright 2016 The Cartographer Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

import "src/proto.proto";

package point_viewer.grpc.proto;

service Octree {
  // See point_viewer::octree::Octree trait.
  // TODO(sirver): This is not the most efficient interface for a gRPC
  // version. We probably just send the node metadata to the client and let
  // the client do figure out GetVisibleNodes.
  rpc GetRootBoundingCube(GetRootBoundingCubeRequest)
      returns (GetRootBoundingCubeReply);
  rpc GetVisibleNodes(GetVisibleNodesRequest) returns (GetVisibleNodesReply);
  rpc GetNodeData(GetNodeDataRequest) returns (GetNodeDataReply);
  rpc GetPointsInBox(GetPointsInBoxRequest)
      returns (stream GetPointsInBoxReply);
}

message GetRootBoundingCubeRequest {
}

message GetRootBoundingCubeReply {
  point_viewer.proto.AxisAlignedCube bounding_cube = 1;
}

message GetVisibleNodesRequest {
  // TODO(sirver): Have a better matrix representation
  repeated float projection_matrix = 1;  // A 4x4 projection matrix.
  int32 width = 2;                       // Viewport width in pixels.
  int32 height = 3;                      // Viewport heigt in pixels.
}

message GetVisibleNodesReply {
  // The visible nodes for the given viewpoint, sorted by pixel size on
  // screen.
  repeated string node_ids = 1;
}

message GetNodeDataRequest {
  string id = 1;
}

message GetNodeDataReply {
  point_viewer.proto.Node node = 1;
  bytes position = 2;
  bytes color = 3;
}

message GetPointsInBoxRequest {
  point_viewer.proto.AxisAlignedCuboid bounding_box = 1;
}

message GetPointsInBoxReply {
  repeated point_viewer.proto.Vector3f points = 1;
}
