/*
 * Copyright 2016 The Cartographer Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

import "point_viewer_proto_rust/src/proto.proto";

package point_viewer.grpc.proto;

service Octree {
  rpc GetMeta(GetMetaRequest) returns (GetMetaReply);
  rpc GetNodeData(GetNodeDataRequest) returns (GetNodeDataReply);
  rpc GetPointsInBox(GetPointsInBoxRequest)
      returns (stream PointsReply);
  rpc GetPointsInFrustum(GetPointsInFrustumRequest)
      returns (stream PointsReply);
}

message GetMetaRequest {
}

message GetMetaReply {
  point_viewer.proto.Meta meta = 1;
}

message GetNodeDataRequest {
  string id = 1;
}

message GetNodeDataReply {
  point_viewer.proto.Node node = 1;
  bytes position = 2;
  bytes color = 3;
}

message GetPointsInBoxRequest {
  point_viewer.proto.AxisAlignedCuboid bounding_box = 1;
}

message GetPointsInFrustumRequest {
  point_viewer.proto.Vector3f translation = 1;
  point_viewer.proto.Vector4f rotation = 2;
  double fovy_rad = 3;
  double aspect = 4;
  double z_near = 5;
  double z_far = 6;
}

message PointsReply {
  // For every point a position. This is guaranteed to contain entries.
  repeated point_viewer.proto.Vector3f positions = 1;

  // For every point a color value (R, G, B, A).
  repeated point_viewer.proto.Color colors = 2;

  // For every point an intensity value. Might not exist if there are no intensities.
  repeated float intensities = 3;

}
